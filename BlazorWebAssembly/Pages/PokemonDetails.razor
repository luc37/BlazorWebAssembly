@page "/pokemon/details/{Name}"

@inject IPokemonApiService _pokemonApiService

<PageTitle>@PageHelpers.GetProperName(Name)</PageTitle>

@if (_thrownError)
{
    <p><em>@ErrorMessage</em></p>
}
else if (_loading)
{
    <LoadingAnimation Loading="_loading"></LoadingAnimation>
}
else
{
    <Container Fluid>
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
                <Jumbotron Background="Background.Dark" Margin="Margin.Is4.FromBottom">
                    <JumbotronTitle Size="JumbotronTitleSize.Is4">@PageHelpers.GetProperName(Name)</JumbotronTitle>
                        <JumbotronSubtitle>
                            @_pokemon.FlavourText
                    </JumbotronSubtitle>
                </Jumbotron>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is12">
                <AppRadarChart Labels="@_chartLabels" ChartData="@_chartData" Name="@Name"></AppRadarChart>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is12">
                <img class="tile-image" src="@_pokemon.TileImageUrl" alt="todo" />
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Class="scroll-x">
                    <Items>
                        <Tab Name="abilities">Abilities</Tab>
                        <Tab Name="species">Species</Tab>
                        <Tab Name="moves">Moves</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="species">
                            <ListGroup>
                                <ListGroupItem>
                                    <Paragraph>
                                        Base Experience: @_pokemon.Base_experience <br />
                                        Order: @_pokemon.Order <br />
                                        Height: @_pokemon.Height <br />
                                        Weight: @_pokemon.Weight <br />
                                    </Paragraph>
                                </ListGroupItem>
                                <ListGroupItem>
                                    <Paragraph>
                                        Base Happiness: @_species.Base_happiness <br />
                                        Capture Rate: @_species.Capture_rate <br />
                                    </Paragraph>
                                </ListGroupItem>
                            </ListGroup>
                        </TabPanel>
                        <TabPanel Name="abilities">
                            <ListGroup>
                                @foreach (var ability in _abilities)
                                {  
                                    <ListGroupItem>
                                        <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@PageHelpers.GetProperName(ability.Name)</Heading>
                                            <Small><Icon Name="IconName.Bug"></Icon></Small>
                                        </Div>
                                        <Paragraph Margin="Margin.Is1.FromBottom">
                                            @ability.Effect_entries.First(x => x.Language.Name == "en").Effect
                                        </Paragraph>
                                        <Small>@("["+ability.Effect_entries.First(x => x.Language.Name == "en").Short_effect+"]")</Small>
                                    </ListGroupItem>
                                }
                            </ListGroup>
                        </TabPanel>
                        <TabPanel Name="moves">
                            <CardDeck>
                                @foreach (var move in _moves)
                                {
                                    <Card Class="move-card">
                                        <CardBody>
                                            <CardTitle TextAlignment="TextAlignment.Center" Size="5">@(PageHelpers.GetProperName(move.Name))</CardTitle>
                                            <CardText>
                                                <Table>
                                                    <TableBody>
                                                        <TableRow>
                                                            <TableRowHeader>Accuracy</TableRowHeader>
                                                            <TableRowCell>
                                                                <Badge Width="Width.Is100" Color="Color.Primary">@(move.Accuracy ?? 0)</Badge>
                                                            </TableRowCell>
                                                        </TableRow>
                                                        <TableRow>
                                                            <TableRowHeader>Priority</TableRowHeader>
                                                            <TableRowCell>
                                                                <Badge Width="Width.Is100" Color="Color.Primary">@(move.Priority ?? 0)</Badge>
                                                            </TableRowCell>
                                                        </TableRow>
                                                        <TableRow>
                                                            <TableRowHeader>Power</TableRowHeader>
                                                            <TableRowCell>
                                                                <Badge Width="Width.Is100" Color="Color.Primary">@(move.Power ?? 0)</Badge>
                                                            </TableRowCell>
                                                        </TableRow>
                                                    </TableBody>
                                                </Table>
                                            </CardText>
                                        </CardBody>
                                    </Card>
                                }
                            </CardDeck>
                        </TabPanel>
                    </Content>
                </Tabs>
            </Column>
        </Row>
    </Container>
}

@code {
    [Parameter] public string Name { get; set; }

    private const string Endpoint = "/pokemon";
    private const string ApiCall = Constants.BasePokemonApiUrl + Endpoint;
    private const string ErrorMessage = Constants.DefaultErrorMessage;

    private PokemonApiModel _sourcePokemon = new PokemonApiModel();
    private PokemonViewModel _pokemon = new PokemonViewModel();
    private SpeciesApiModel _species = new SpeciesApiModel();
    private List<AbilityApiModel> _abilities = new List<AbilityApiModel>();
    private List<MoveApiModel> _moves = new List<MoveApiModel>();

    private string[] _chartLabels = { "Experience", "Height", "Weight", "Happiness", "Capture Rate", "# Moves" };
    private List<int> _chartData = new List<int>();

    private string _selectedTab = "abilities";
    private bool _loading = true;
    private bool _thrownError = false;

    protected override async Task OnInitializedAsync()
    {
        await GetPageData(ApiCall + "/" + Name);
        _chartData = new List<int>
        {
            (_sourcePokemon?.Base_experience * 100) / 400 ?? 0,
            (_sourcePokemon?.Height * 100) / 200  ?? 0,
            (_sourcePokemon?.Weight * 100) / 10000 ?? 0,
            (_species?.Base_happiness * 100) / 150 ?? 0,
            (_species?.Capture_rate * 100) / 260 ?? 0,
            (_sourcePokemon?.Moves.Count * 100) / 250 ?? 0
        };
    }

    private async Task GetPageData(string url)
    {
        try
        {
            _loading = true;
            _sourcePokemon = await _pokemonApiService.GetSourceApiModelDetails<PokemonApiModel>(url);
            _species = await _pokemonApiService.GetSourceApiModelDetails<SpeciesApiModel>(_sourcePokemon.Species.Url);
            _abilities = await _pokemonApiService
                .GetListSourceApiModelDetails<AbilityApiModel>(_sourcePokemon.Abilities.Select(x => x.Ability).ToList());
            _moves = await _pokemonApiService
                .GetListSourceApiModelDetails<MoveApiModel>(_sourcePokemon.Moves.Select(x => x.Move).ToList());
            _pokemon = new PokemonViewModel
            {
                Name = _sourcePokemon.Name,
                Url = _sourcePokemon.Url,
                TileImageUrl = _sourcePokemon?.Sprites?.Front_default ?? string.Empty,
                Base_experience = _sourcePokemon.Base_experience,
                Order = _sourcePokemon.Order,
                Height = _sourcePokemon.Height,
                Weight = _sourcePokemon.Weight,
                FlavourText = _species.Flavor_text_entries[0].Flavor_text
            };
        }
        catch
        {
            _thrownError = true;
        }

        _loading = false;
    }

    private Task OnSelectedTabChanged(string name)
    {
        _selectedTab = name;
        return Task.CompletedTask;
    }
}
